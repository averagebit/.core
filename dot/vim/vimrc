" Initialize {{{
" ----------

if has('vim_starting')
  " Set data/cache directory as $XDG_CACHE_HOME/vim
  let $VIM_DATA_PATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache') . '/vim', 1)

  " Install vim-plug and plugins if not installed
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim 
          \--create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif

  if has('nvim')
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim 
            \--create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    set guicursor=
  endif

  " Disable arrows and map leaders
  let g:elite_mode=1
  let g:mapleader="\<Space>"
  let g:maplocalleader='\'

  " Enable syntax and 24-bit color support
  syntax on
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" Disable vim distribution plugins
let g:loaded_gzip = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1

let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1

" let g:loaded_matchit = 1
" let g:loaded_matchparen = 1
let g:loaded_2html_plugin = 1
let g:loaded_logiPat = 1
let g:loaded_rrhelper = 1

" let g:loaded_netrw = 1
" let g:loaded_netrwPlugin = 1
" let g:loaded_netrwSettings = 1
" let g:loaded_netrwFileHandlers = 1

" }}}
" General {{{
" -------

set nocompatible             " Vi compatibility setting
set mouse=nv                 " Disable mouse in command-line mode
set synmaxcol=2500           " Don't syntax highlight long lines
set history=2000             " Size of history to retain
set clipboard=unnamed        " Use unnamed clipboard
set viminfo='20,<1000,s1000  " Prevents truncated yanks, deletes etc.
set splitbelow splitright    " Always split to the bottom right
set switchbuf=uselast        " Jump to the last open window
set re=0                     " Regex engine
set showcmd                  " Show command in status line
set autoread                 " Autoread on third party changes
set autowrite                " Save on buffer leave
set autowriteall             " Save on buffer leave
set nomodeline               " Disable modeline
set noswapfile               " Disable swap file

" Autoread
au FocusLost,WinLeave,BufLeave * :silent! noautocmd wall

" }}}
" Formatting {{{
" ----------

set textwidth=72               " Set text width
set nowrap                     " Disable text wrapping
set whichwrap+=h,l,<,>,[,],~   " Move to following line on certain keys
set linebreak                  " Break long lines at 'breakat'
set breakat=\ \	;:,!?          " Long lines break chars
set backspace=indent,eol,start " Intuitive backspacing in insert mode

if exists('&breakindent')
	set breakindentopt=shift:2,min:20
endif

set formatoptions+=1   " Don't break lines after a one-letter word
set formatoptions-=t   " Don't auto-wrap text
set formatoptions-=o   " Disable comment-continuation (normal 'o'/'O')

if has('patch-7.3.541')
	set formatoptions+=j " Remove comment leader when joining lines
endif

" }}}
" Searching {{{
" ---------

set ignorecase " Search ignoring case
set smartcase  " Keep case when searching with *
set infercase  " Adjust case in insert completion mode
set incsearch  " Incremental search
set wrapscan   " Searches wrap around the end of the file

" }}}
" Tabs & Indents {{{
" --------------

set expandtab         " Expand tabs to spaces
set tabstop=2         " The number of spaces a tab is
set shiftwidth=2      " Number of spaces to use in auto(indent)
set softtabstop=-1    " Automatically keeps in sync with shiftwidth
set smarttab          " Tab insert blanks according to 'shiftwidth'
set autoindent        " Use same indenting on new lines
set smartindent       " Smart autoindenting on new lines
set shiftround        " Round indent to multiple of 'shiftwidth'
set foldmethod=indent " Set folding method
set nofoldenable      " Disable automatic folding

" }}}
" Timing {{{
" ------

set timeout ttimeout " Configure timeouts
set timeoutlen=500   " Time out on mappings
set ttimeoutlen=10   " Time out on key codes
set updatetime=200   " Idle time to write swap and trigger CursorHold
set redrawtime=1500  " Time in milliseconds for stopping display redraw

" }}}
" Completion {{{
" ----------

set completeopt=menu,menuone   " Always show menu, even for one item
set completeopt+=noselect      " Do not select a match in the menu

if has('wildmenu')
	set wildignorecase
	set wildignore+=.git,.hg,.svn,.stversions,*.pyc,*.spl,*.o,*.out,*~,%*
	set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.zip,**/tmp/**,*.DS_Store
	set wildignore+=**/node_modules/**,**/bower_modules/**,*/.sass-cache/*
	set wildignore+=__pycache__,*.egg-info,.pytest_cache,.mypy_cache/**
endif

" }}}
" Editor UI {{{
" ---------

set showmode          " Show mode in cmd window
set shortmess=aoOTI   " Shorten messages and don't show intro
set scrolloff=2       " Keep at least 2 lines above/below
set sidescrolloff=5   " Keep at least 5 lines left/right
set nu rnu            " Hybrid line numbers
set noruler           " Disable default status ruler
set nolist            " Don't show hidden characters
set hlsearch          " Search highlight

set showtabline=0     " Never show the tabs line
set helpheight=12     " Minimum help window height
set winwidth=30       " Minimum width for active window
set winminwidth=10    " Minimum width for inactive windows
set winheight=1       " Minimum height for active window
set winminheight=1    " Minimum height for inactive window

set showcmd           " Command visibility in status line
set cmdheight=2       " Command line height
set cmdwinheight=5    " Command line lines
set noequalalways     " Don't resize windows on split or close
set laststatus=2      " Status line visibility
set colorcolumn=+0    " Colur column width at textwidth limit
set signcolumn=number " Sign column visibility (merge w\ number column)

" Pop-up menu's max width & height
set pumheight=15
if exists('+pumwidth')
	set pumwidth=10
endif

" UI Symbols
set listchars=trail:*,nbsp:*,extends:>,precedes:<,tab:\|>

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0 ? '  ' . l:branchname . ' ' : ''
endfunction

" Status line
set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#StatusLine#
set statusline+=\ %f
set statusline+=%=
set statusline+=\ \ %m
set statusline+=\ \ %(Ln\ %l,\ Col\ %c%)
set statusline+=\ \ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ \ %y
set statusline+=\ 


" }}}
" Filetype specific configuration {{{
" -------------------------------

augroup user_plugin_filetype
	autocmd!

	autocmd FileType tmux,vim setlocal foldenable foldmethod=marker

	autocmd FileType crontab setlocal nobackup nowritebackup

	autocmd FileType yaml setlocal expandtab tabstop=2 shiftwidth=2

	autocmd FileType gitcommit,qfreplace setlocal nofoldenable

	autocmd FileType markdown
		\ setlocal expandtab spell formatoptions=atcroqn2 comments=n:>

augroup END

" }}}
" Keymap {{{
" ------

" Allow misspellings
cnoreabbrev W w
cnoreabbrev qw wq
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Qa qa
cnoreabbrev Bd bd
cnoreabbrev bD bd

" Diff maps
nmap <Leader>d <cmd>diffget<CR>
nmap <Leader>dl <cmd>diffget //3<CR>
nmap <Leader>dh <cmd>diffget //2<CR>

" Resize splits with arrow keys.
if get(g:, 'elite_mode')
  nnoremap <silent><Up>    <cmd>resize +1<CR>
  nnoremap <silent><Down>  <cmd>resize -1<CR>
  nnoremap <silent><Left>  <cmd>vertical resize +1<CR>
  nnoremap <silent><Right> <cmd>vertical resize -1<CR>
endif

" Source .vimrc
nnoremap <Leader>rr <cmd>source ~/.vimrc<CR>

" Yank to the end of the line
nnoremap Y y$

" Maintain cursor position and keep it centered during search & joining
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

" Re-select blocks after indenting in visual/select mode
xnoremap < <gv
xnoremap > >gv|

" Indent and jump to first non-blank character linewise
nmap >>  >>_
nmap <<  <<_

" Drag current line/s vertically and auto-indent
nnoremap <Leader>k <cmd>m-2<CR>
nnoremap <Leader>j <cmd>m+<CR>
vnoremap <Leader>k <cmd>m'<-2<CR>gv=gv
vnoremap <Leader>j <cmd>m'>+<CR>gv=gv

" Clear highlight with return
nnoremap <silent> <CR> <cmd>let @/ = ""<CR><CR>

" Toggle editor's visual effects
nmap <Leader>ts <cmd>setlocal spell!<CR>
nmap <Leader>tn <cmd>setlocal nonumber!<CR><cmd>setlocal rnu!<CR>
nmap <Leader>tl <cmd>setlocal nolist!<CR>
nmap <Leader>th <cmd>nohlsearch<CR>

" Smart wrap toggle (breakindent and colorcolumn toggle as-well)
nmap <Leader>tw <cmd>execute('setlocal wrap! breakindent! colorcolumn=' .
	\ (&colorcolumn == '' ? &textwidth : ''))<CR>

" Show syntax highlight groups for character under cursor
nmap <Leader>tg <cmd>echo
	\ 'hi<' . synIDattr(synID(line('.'), col('.'), 1), 'name')
	\ . '> trans<' . synIDattr(synID(line('.'), col('.'), 0), 'name') . '> lo<'
	\ . synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name') . '>'<CR>

" Append modeline
" See: http://vim.wikia.com/wiki/Modeline_magic
function! s:append_modeline() "{{{
	let l:modeline = printf(' vim: set ts=%d sw=%d tw=%d %set :',
				\ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
	let l:modeline = substitute(&commentstring, '%s', l:modeline, '')
	call append(line('$'), l:modeline)
endfunction "}}}
nnoremap <Leader>ml <cmd>call <SID>append_modeline()<CR>

" }}}
" Plugins {{{
" -------

" Load plugins
call plug#begin(expand($VIM_DATA_PATH . '/plugins'))
  " Plug 'github/copilot.vim'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': ['go'] }
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
  Plug 'tpope/vim-fugitive'
  Plug 'neoclide/coc.nvim', { 'branch': 'release', 'for': [
            \'javascriptreact',
            \'typescriptreact',
            \'javascript',
            \'typescript',
            \'handlebars',
            \'graphql',
            \'json',
            \'html',
            \'css',
          \] 
        \}

  if has('nvim')
    Plug 'catppuccin/nvim', {'as': 'catppuccin'}
  else
    Plug 'gruvbox-community/gruvbox'
  endif
call plug#end()

" Coc
let s:user_coc_filetypes = [
        \'javascriptreact',
        \'typescriptreact',
        \'javascript',
        \'typescript',
        \'handlebars',
        \'graphql',
        \'json',
        \'html',
        \'css',
      \]

function! s:user_toggle_coc_for_type()
	if index(s:user_coc_filetypes, &filetype) == -1
    :silent! CocDisable
  else
    :silent! CocEnable
	endif
endfunction

augroup UserCocGroup
	autocmd!
	autocmd BufNew,BufEnter * call s:user_toggle_coc_for_type()
augroup end

" Colorscheme
if has('nvim')
  colorscheme catppuccin
else
  let g:gruvbox_bold='0'
  let g:gruvbox_contrast_dark='hard'
  let g:gruvbox_contrast_light='hard'

  colorscheme gruvbox
endif

set background=dark

" Disable background
hi Normal guibg=NONE ctermbg=NONE
hi NormalNC guibg=NONE ctermbg=NONE
hi NonText guibg=NONE ctermbg=NONE

" Rust
let g:rustfmt_autosave = 1
let g:rust_clip_command = 1

au FileType rust nmap <leader>c <cmd>Ccheck<CR>
au FileType rust nmap <leader>b <cmd>Cbuild<CR>
au FileType rust nmap <leader>r <cmd>RustRun<CR>
au FileType rust nmap <leader>t <cmd>RustTest<CR>
au FileType rust nmap <leader>tt <cmd>RustTest!<CR>

" Golang
let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_diagnostic_errors = 1
let g:go_highlight_diagnostic_warnings = 1

au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>r <Plug>(go-run-split)
au FileType go nmap <leader>t <Plug>(go-test-func)
au FileType go nmap <leader>tt <Plug>(go-test)

" Fzf
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files'
  let $FZF_DEFAULT_OPTS='--color=bg+:#302D41,spinner:#F8BD96,hl:#F28FAD --color=fg:#D9E0EE,header:#F28FAD,info:#DDB6F2,pointer:#F8BD96 --color=marker:#F8BD96,fg+:#F2CDCD,prompt:#DDB6F2,hl+:#F28FAD'
endif
nmap <C-p> :FZF<CR>

" Netrw
let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_winsize = 23
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_sort_sequence = '[\/]$,*'

map <silent> <LocalLeader>e :Lexplore<CR>

" }}}

" vim: set foldenable foldmethod=marker ts=2 sw=2 tw=72 et :
