" Initialize {{{

if has('vim_starting')
  " Set data/cache directory as $XDG_CACHE_HOME/vim
  let $DATA_PATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache') . '/vim', 1)

  " Install vim-plug and plugins if not installed
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif

  if has('nvim')
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    set guicursor=
  endif

  " Disable arrows and map leaders
  let g:elite_mode=1
  let g:mapleader="\<Space>"
  let g:maplocalleader=';'

  " Enable syntax and 24-bit color support
  syntax on
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" Disable vim distribution plugins
let g:loaded_gzip = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1

let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1

" let g:loaded_matchit = 1
" let g:loaded_matchparen = 1
let g:loaded_2html_plugin = 1
let g:loaded_logiPat = 1
let g:loaded_rrhelper = 1

" let g:loaded_netrw = 1
" let g:loaded_netrwPlugin = 1
" let g:loaded_netrwSettings = 1
" let g:loaded_netrwFileHandlers = 1

" Load plugins
call plug#begin(expand($DATA_PATH . '/plugins'))
  Plug 'averagebit/onedark.vim'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
  Plug 'fatih/vim-go', { 'for': ['go'], 'do': ':GoUpdateBinaries' }
  Plug 'neoclide/coc.nvim', { 'branch': 'release', 'for': ['javascript', 'javascriptreact', 'typescript', 'typescriptreact', 'json'] }
call plug#end()

" }}}

" Settings {{{

set nocompatible               " Vi compatibility setting
colorscheme onedark            " Colorscheme
set background=dark            " Colorscheme background
set mouse=nv                   " Disable mouse in command-line mode
set synmaxcol=2500             " Don't syntax highlight long lines
set history=2000               " Size of history to retain
set clipboard=unnamed          " Use unnamed clipboard
set viminfo='20,<1000,s1000    " Prevents truncated yanks, deletes etc.
set foldmethod=manual          " Disable automatic folding
set nofoldenable               " Disable automatic folding
set expandtab                  " Expand tabs to spaces
set tabstop=2                  " The number of spaces a tab is
set shiftwidth=2               " Number of spaces to use in auto(indent)
set softtabstop=-1             " Automatically keeps in sync with shiftwidth
set smarttab                   " Tab insert blanks according to 'shiftwidth'
set autoindent                 " Use same indenting on new lines
set smartindent                " Smart autoindenting on new lines
set shiftround                 " Round indent to multiple of 'shiftwidth'
set nowrap                     " Disable text wrapping
set timeout ttimeout           " Configure timeouts
set timeoutlen=500             " Time out on mappings
set ttimeoutlen=10             " Time out on key codes
set updatetime=200             " Idle time to write swap and trigger CursorHold
set redrawtime=1500            " Time in milliseconds for stopping display redraw
set ignorecase                 " Search ignoring case
set smartcase                  " Keep case when searching with *
set infercase                  " Adjust case in insert completion mode
set incsearch                  " Incremental search
set wrapscan                   " Searches wrap around the end of the file
set hlsearch                   " Search highlight
set splitbelow splitright      " Always split to the bottom right
set switchbuf=useopen,vsplit   " Jump to the first open window
set backspace=indent,eol,start " Intuitive backspacing in insert mode
set scrolloff=2                " Keep at least 2 lines above/below
set sidescrolloff=5            " Keep at least 5 lines left/right
set nu rnu                     " Hybrid line numbers
set cmdheight=2                " Command line height
set laststatus=0               " Don't display the status line
set showmode                   " Show mode in cmd window
set completeopt=menu,menuone   " Always show menu, even for one item
set completeopt+=noselect      " Do not select a match in the menu
set showtabline=2              " Always show the tabs line
set pumheight=15               " Pop-up menu's line height
set helpheight=12              " Minimum help window height
set previewheight=12           " Completion preview height
set noequalalways              " Don't resize windows on split or close
set colorcolumn=72             " Colur column width/visilbility
set signcolumn=number          " Sign column visibility (merge with number column)
set cmdwinheight=5             " Command-line lines
set formatoptions+=1           " Don't break lines after a one-letter word
set formatoptions-=o           " Disable comment-continuation (normal 'o'/'O')
set re=0                       " Regex engine
set showcmd                    " Show command in status line
set autoread                   " Autoread if third party changes are detected
set autowrite                  " Save on buffer leave
set autowriteall               " Save on buffer leave

" Autoread
au FocusLost,WinLeave,BufLeave * :silent! noautocmd wall

" UI Symbols
set listchars=trail:*,nbsp:*,extends:>,precedes:<,tab:\|>

" Statusline
set statusline=\ %=\ Ln\ %l,\ Col\ %c\ %{&fileencoding?&fileencoding:&encoding}\ %Y\

" Allow misspellings
cnoreabbrev W w
cnoreabbrev qw wq
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Qa qa
cnoreabbrev Bd bd
cnoreabbrev bD bd

" }}}

" Keymap {{{

" Resize splits with arrow keys.
if get(g:, 'elite_mode')
  nnoremap <silent><Up>    :resize +1<CR>
  nnoremap <silent><Down>  :resize -1<CR>
  nnoremap <silent><Left>  :vertical resize +1<CR>
  nnoremap <silent><Right> :vertical resize -1<CR>
endif

" Source .vimrc
nnoremap <Leader>rr :source ~/.vimrc<CR>

" Re-select blocks after indenting in visual/select mode
xnoremap < <gv
xnoremap > >gv|

" Indent and jump to first non-blank character linewise
nmap >>  >>_
nmap <<  <<_

" Drag current line/s vertically and auto-indent
nnoremap <Leader>k :m-2<CR>
nnoremap <Leader>j :m+<CR>
vnoremap <Leader>k :m'<-2<CR>gv=gv
vnoremap <Leader>j :m'>+<CR>gv=gv

" Clear highlight with return
nnoremap <silent> <CR> :let @/ = ""<CR><CR>

" Toggle editor's visual effects
nmap <Leader>ts <cmd>setlocal spell!<CR>
nmap <Leader>tn <cmd>setlocal nonumber!<CR>
nmap <Leader>tl <cmd>setlocal nolist!<CR>
nmap <Leader>th <cmd>nohlsearch<CR>

" Smart wrap toggle (breakindent and colorcolumn toggle as-well)
nmap <Leader>tw <cmd>execute('setlocal wrap! breakindent! colorcolumn=' .
	\ (&colorcolumn == '' ? &textwidth : ''))<CR>

" Show syntax highlight groups for character under cursor
nmap <Leader>tg <cmd>echo
	\ 'hi<' . synIDattr(synID(line('.'), col('.'), 1), 'name')
	\ . '> trans<' . synIDattr(synID(line('.'), col('.'), 0), 'name') . '> lo<'
	\ . synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name') . '>'<CR>

" }}}

" Plugin Settings {{{

" Rust
let g:rustfmt_autosave = 1
let g:rust_clip_command = 1

au FileType rust nmap <leader>c :Ccheck<CR>
au FileType rust nmap <leader>b :Cbuild<CR>
au FileType rust nmap <leader>r :RustRun<CR>
au FileType rust nmap <leader>t :RustTest<CR>
au FileType rust nmap <leader>tt :RustTest!<CR>

" Golang
let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_diagnostic_errors = 1
let g:go_highlight_diagnostic_warnings = 1

au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>r <Plug>(go-run-split)
au FileType go nmap <leader>t <Plug>(go-test-func)
au FileType go nmap <leader>tt <Plug>(go-test)

" FZF
let $FZF_DEFAULT_COMMAND = 'rg --files'
nmap <C-p> :FZF<CR>

" netrw
" let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_winsize = 18
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_sort_sequence = '[\/]$,*'

map <silent> <LocalLeader>e :Lexplore<CR>

" }}}
